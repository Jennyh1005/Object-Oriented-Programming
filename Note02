What is Encapsulation?
- Encapsulation is a concept in OOP that involves information hiding, which restricts access to certain attributes and methods of a class or object. 
- This is done for data protection and to limit the calling of certain methods. 
- In Python, encapsulation is achieved through a special system that uses a double underscore __ as a prefix to hide attributes and methods.

- example
"class Student:
  def __init__(self,nameF, nameL, num):
    self.firstName = nameF
    self.lastName = nameL
    self.__studentNumber = num
  
  def __getStudentNumber(self):
    return self.__studentNumber

#end of Student
"s1 = Student("Mr.", "Park", 10)
print(s1.__getStudentNumber()) # Will cause an error
print(s1.__studentNumber) # Will also cause an error"

Importance of Encapsulation:
class Student:
  def __init__(self,nameF, nameL, num):
    self.firstName = nameF
    self.lastName = nameL
    self.__studentNumber = num

#end of Student

s1 = Student("Mr.", "Park", 10)
print(s1.firstName) # Returns/Outputs “Mr.”

s1.firstName = "Ms."
print(s1.firstName) # Returns/Outputs “Ms.”"

Overloading and Overriding:
- Overloading is having two methods in the same class with the same name but different parameters.
- Overriding is having a method in a child class with the same name and parameters as a method in the parent class.
- Overriding allows the child class to provide specific implementation for the method that exists in the parent class.
- It is possible to override built-in magic-methods or base functions in Python.
- There is no overloading in Python 3.

What is Polymorphism?
- Polymorphism refers to a method that can be used across different classes and objects, depending on the parameters. 
- The term "poly" means many, and "morphism" means forms. 
- different classes can have the same named methods, and within a set of inherited classes, they can have the same methods too.

Polymorphism and Inheritance:
- Overloading is not supported in Python 3, but it is a form of Polymorphism. 
- Polymorphism is the ability of a method to be used by different classes and objects depending on the parameters passed to it. 
- In Python 3, Polymorphism can be achieved through Inheritance, where inherited classes modify inherited methods, i.e., Overriding.

- example of Illegal Overloading
"class Person:
    def __init__(self, name, age):
        self.__name = name
        self.__age = age

    def show(self):
        return self.__name

    def show(self, num):
        return "%s %d" % (self.__name, self.__age)"

Override and Polymorphism with Python:
- Overriding and polymorphism are fundamental concepts in Python
- They allow for two different classes to have the same attributes and methods, and for a child class to use an overridden method differently from its parent class
- Built-in methods and operators can also be overridden for custom objects, sometimes called "magic methods".






